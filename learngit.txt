git 教程网址：
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

初始化一个Git仓库：
使用git init命令。
$ mkdir learngit
$ cd learngit
$ pwd
$ git init
添加文件到Git仓库，分两步：
第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；git add .   git add readme.txt
第二步，使用命令git commit，完成。 git commit -m "add distributed"

查看状态和比较：
要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
$ git log --pretty=oneline
git diff readme.txt 


切换不同版本
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

撤销修改
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态
git checkout -- readme.txt

用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage）
$ git reset HEAD readme.txt
又到了小结时间。
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

撤销远程git提交
 git reset --hard HEAD~1
 git push -f origin master

 
 
删除文件
$ rm test.txt
一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
$ git checkout -- test.txt


添加远程库
首先应该创建一个SSH Key ： 
$ ssh-keygen -t rsa -C "juesu.chen@axbsec.com"
然后
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
git remote add origin https://github.com/juesuchen/workUtils.git
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！
公钥方式：url = git@github.com:juesuchen/learngit.git
https方式：url = https://github.com/juesuchen/learngit.git


从远程库克隆
登陆GitHub，创建一个新的仓库，名字叫gitskills
下一步是用命令git clone克隆一个本地库：
git clone git@github.com:juesuchen/gitskills.git
这样就会在当前目录创建一个库
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。


创建与合并分支
首先，我们创建dev分支，然后切换到dev分支：
$ git checkout -b dev
然后，用git branch命令查看当前分支：
$ git branch
切换分支
git checkout master

现在，我们把dev分支的工作成果合并到master分支上，git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。
git merge dev
合并完成后，就可以放心地删除dev分支了：
$ git branch -d dev
Git鼓励大量使用分支：

查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
看到分支合并图:$ git log --graph --pretty=oneline --abbrev-commit

协作合作：
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

标签：
命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
命令git tag可以查看所有标签。
命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。


使用GitHub
在GitHub上，可以任意Fork开源仓库；
自己拥有Fork后的仓库的读写权限；
可以推送pull request给官方仓库来贡献代码。

搭建Git服务器非常简单，通常10分钟即可完成；
要方便管理公钥，用Gitosis；
要像SVN那样变态地控制权限，用Gitolite。